generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Profile {
  id           String   @id @db.Uuid
  created_at   DateTime @default(dbgenerated("now()")) @db.Timestamptz(6)
  name         String
  username     String   @unique
  avatar       String   @default("https://jsjanvtxqjlqjmlyxvlp.supabase.co/storage/v1/object/public/avatars//default_avatar.png")
  verified     Boolean  @default(false)
  bio          String?
  header_image String?
  website      String?
  location     String?

  following Followers[] @relation("Following")
  follower  Followers[] @relation("Follower")
  tweets    Tweets[]
  likes     Likes[]
  retweets  Retweets[]
  bookmarks Bookmarks[]

  @@index([created_at, id, username])
  @@map("profiles")
}

model Followers {
  id             Int    @id @default(autoincrement())
  user_following String @db.Uuid
  user_to_follow String @db.Uuid

  following_user Profile @relation("Following", fields: [user_following], references: [id])
  follower_user  Profile @relation("Follower", fields: [user_to_follow], references: [id])

  @@index([id, user_following, user_to_follow])
  @@map("followers")
}

model Tweets {
  id           String   @id @default(cuid()) @db.Uuid
  created_at   DateTime @default(now()) @db.Timestamptz(6)
  user_id      String   @db.Uuid
  tweet_text   String?
  tweet_images String[]

  user      Profile     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  likes     Likes[]
  retweets  Retweets[]
  bookmarks Bookmarks[]

  @@index([id, user_id, created_at])
  @@map("tweets")
}

model Likes {
  id       Int    @id @default(autoincrement())
  tweet_id String @db.Uuid
  user_id  String @db.Uuid

  tweet Tweets  @relation(fields: [tweet_id], references: [id], onDelete: Cascade)
  user  Profile @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([tweet_id, user_id])
  @@map("likes")
}

model Retweets {
  id       Int    @id @default(autoincrement())
  tweet_id String @db.Uuid
  user_id  String @db.Uuid

  tweet Tweets  @relation(fields: [tweet_id], references: [id], onDelete: Cascade)
  user  Profile @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([tweet_id, user_id])
  @@map("retweets")
}

model Bookmarks {
  id       Int    @id @default(autoincrement())
  tweet_id String @db.Uuid
  user_id  String @db.Uuid

  tweet Tweets  @relation(fields: [tweet_id], references: [id], onDelete: Cascade)
  user  Profile @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([tweet_id, user_id])
  @@map("bookmarks")
}
