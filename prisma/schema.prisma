generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @db.Uuid
  name      String
  username  String   @unique
  avatarUrl String   @map("avatar_url")
  bannerUrl String?  @map("banner_url")
  bio       String?
  website   String?
  location  String?
  createdAt DateTime @default(dbgenerated("now()")) @map("created_at") @db.Timestamptz(6)

  followers Follow[]   @relation("Follower")
  following Follow[]   @relation("Following")
  tweets    Tweet[]
  likes     Like[]
  bookmarks Bookmark[]
  retweets  Retweet[]

  @@index([id, username, createdAt])
  @@map("users")
}

model Follow {
  id          Int    @id @default(autoincrement())
  followerId  String @map("user_following") @db.Uuid
  follower    User   @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String @map("user_follower") @db.Uuid
  following   User   @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId, followingId])
  @@map("follow")
}

model Tweet {
  id        String   @id @db.Uuid
  createdAt DateTime @default(dbgenerated("now()")) @map("created_at") @db.Timestamptz(6)
  content   String?
  media     String[]
  userId    String   @map("user_id") @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  likes     Like[]
  bookmarks Bookmark[]
  retweets  Retweet[]

  @@index([id, createdAt, userId])
  @@map("tweets")
}

model Like {
  id      Int    @id @default(autoincrement())
  tweetId String @map("tweet_id") @db.Uuid
  tweet   Tweet  @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  userId  String @map("user_id") @db.Uuid
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([tweetId, userId])
  @@index([id, tweetId, userId])
  @@map("likes")
}

model Bookmark {
  id      Int    @id @default(autoincrement())
  tweetId String @map("tweet_id") @db.Uuid
  tweet   Tweet  @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  userId  String @map("user_id") @db.Uuid
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([tweetId, userId])
  @@index([id, tweetId, userId])
  @@map("bookmarks")
}

model Retweet {
  id      Int    @id @default(autoincrement())
  tweetId String @map("tweet_id") @db.Uuid
  tweet   Tweet  @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  userId  String @map("user_id") @db.Uuid
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([tweetId, userId])
  @@index([id, tweetId, userId])
  @@map("retweets")
}
