generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @db.Uuid
  name      String
  username  String   @unique
  avatarUrl String   @map("avatar_url")
  bannerUrl String?  @map("banner_url")
  bio       String?
  website   String?
  location  String?
  createdAt DateTime @default(dbgenerated("now()")) @map("created_at") @db.Timestamptz(6)

  followers Follow[]   @relation("Follower")
  following Follow[]   @relation("Following")
  posts     Post[]
  likes     Like[]
  bookmarks Bookmark[]
  reposts   Repost[]

  @@index([id, username, createdAt])
  @@map("users")
}

model Follow {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(dbgenerated("now()")) @map("created_at") @db.Timestamptz(6)
  followerId  String   @map("follower_id") @db.Uuid
  follower    User     @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String   @map("following_id") @db.Uuid
  following   User     @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([id, followerId, followingId, createdAt])
  @@map("follow")
}

model Post {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(dbgenerated("now()")) @map("created_at") @db.Timestamptz(6)
  content   String
  userId    String   @map("user_id") @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentId  String?  @map("parent_id") @db.Uuid

  parent   Post?  @relation("post_comments", fields: [parentId], references: [id], onDelete: Cascade)
  comments Post[] @relation("post_comments")

  likes     Like[]
  bookmarks Bookmark[]
  reposts   Repost[]

  @@index([id, createdAt, parentId, userId])
  @@map("posts")
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(dbgenerated("now()")) @map("created_at") @db.Timestamptz(6)
  postId    String   @map("post_id") @db.Uuid
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id") @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@index([id, createdAt, postId, userId])
  @@map("likes")
}

model Bookmark {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(dbgenerated("now()")) @map("created_at") @db.Timestamptz(6)
  postId    String   @map("post_id") @db.Uuid
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id") @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@index([id, createdAt, postId, userId])
  @@map("bookmarks")
}

model Repost {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(dbgenerated("now()")) @map("created_at") @db.Timestamptz(6)
  postId    String   @map("post_id") @db.Uuid
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id") @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@index([id, createdAt, postId, userId])
  @@map("reposts")
}
